

        Algorithm:

        The Round-Robin policy for scheduling runs each job for a fixed amount of time before switching to the next job. The waiting time for a job is the total time that it spends waiting to be run. Each job arrives at a particular time for scheduling and takes a certain amount of time to run. When a new job arrives, it is scheduled after existing jobs already waiting for CPU time.

        Given a list of job submissions, it calculates the average waiting time for all jobs using the Round Robin policy.

        The input to the method waitingTimeRobin of class RoundRobin consists of two integer arrays containing job arrival and run times and an integer q representing the fixed amount of time used by the Round-Robin policy. The list of job arrival times and job run times are sorted in ascending order by arrival time. For jobs arriving at the same time, they are being processed in the order they are found in the arrival array. You can assume the jobs arrive in such a way that the CPU is never idle.

        The function returns a floating point number for the average waiting time which is calculated using Round-Robin policy.

        Assumed: 0 <= job arrival time < 100 and 0 < job run time < 100.

        Arrival Time -> [0,100), Run Time -> (0,100). The arrays are sorted in ascending order by arrival time.
        Input: arrival-> an integer array for list of arrival times for n number of processes, run-> an integer array for list of run times for n number of processes, q-> an integer representing the scheduling quantum,
        Output: A floating point number for the average waiting time which is calculated using round-robin scheduling.


        Test Cases:

        1.
        Output: 2.3333333F
        Input: (new int[] {0, 1, 4}, new int[] {5,2,3}, 3)
        Explanation: The processes run in the following time slots - P1 initially runs for 3 seconds, P2 runs for 2 second, meanwhile P3 arrives. Since P1 was in the queue first, it runs for its remaining 2 seconds while P3 waits. Then P3 finally runs for 3 secs . The waiting time of processes P1, P2, P3 are 2, 2, and 3 respectively. The average is thus 2.3333333 second.
        

        2.
        Output: 1.0F
        Input: (new int[] {0, 1, 3, 9}, new int[] {2, 1, 7, 5}, 2))
        Explanation:
        The processes run in the following time slots - P1 initially runs for 2 seconds, P2 runs for 1 second, P3 runs for 6 seconds till P4 enters the system at the 9th second - when it runs for 2 seconds, P3 then runs for 1 second followed by P4 running for 3 seconds. The waiting time of processes P1, P2, P3, P4 are 0, 1, 2, 1 respectively. The average is thus 1 second.
        
        3.
        Output: 0.0F
        Input: (new int[] {0, 1, 2}, new int[] {1, 1, 4}, 7)
       
        4. Output: 19.25F
            Input: (new int[] {0, 2, 3, 4}, new int[] {45, 4, 24, 3}, 1)
   
        5. Output: 10.6F
            Input: (new int[] {0, 1, 2, 6, 6}, new int[] {8, 8, 2, 7, 1}, 3)

        6. Output: 8.6F
            Input: (new int[] {0, 1, 7, 8, 8}, new int[] {8, 8, 2, 7, 5}, 99)

       7. Output: 0.0F
            Input: (new int[] {0}, new int[] {2}, 2)
    
        8. Output: 0.0F
            Input: (new int[] {0, 4}, new int[] {2, 2}, 2)

        9. Output: 6.25F
            Input: (new int[] {0, 3, 5, 6}, new int[] {7, 4, 1, 4}, 3)

        10. Output: 2.00F
            Input: (new int[] {0, 2, 4, 10}, new int[] {3, 2, 8, 6}, 2)

        11. Output: 7.00F
            Input: (new int[] {0, 2, 4, 5}, new int[] {7, 4, 1, 4}, 3)

        12. Output: 0.00F
            Input: (new int[] {0, 2, 4, 6, 8}, new int[] {2, 2, 2, 2, 2}, 2)

